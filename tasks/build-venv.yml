---
- name: Fire-up docker container used for building virtualenv
  docker_container:
    name: django_stack_venv
    image: "{{ django_stack_venv_docker_image }}"
    command: "{{ django_stack_venv_docker_cmd|default(omit) }}"
    capabilities: "{{ django_stack_venv_docker_cap|default(omit) }}"
    volumes: "{{ django_stack_venv_docker_volumes + [tmp_dir+':/venv-export'] }}"
    env: "{{ django_stack_venv_env | default(omit) }}"
  delegate_to: localhost
  become: no

- name: Add virtualenv docker to current play inventory
  add_host:
    name: django_stack_venv
    ansible_connection: docker

- block:
    - name: Install system dependencies
      apt:
        name: "{{ django_stack_pkgs }}"
        update_cache: yes
        cache_valid_time: 3600
      tags: ['pkgs']

    # Necessary because there is no way to pass --relocatable to virtualenv from
    # pip module, so docker build needs to match remote server
    - name: Create virtualenv base dir to match remote server
      file:
        state: directory
        path: "{{ django_stack_gcorn_home }}"
        recurse: yes

    # Virtualenv will install the latest pip before we get to the point
    # where we can downgrade it, which breaks on 3.5 since pip 21 is
    # using new syntax (it may be that OS-packaged virtualenv is too old
    # to have vendored pip and setuptools). So, run the venv creation
    # and pip install commands manually. We cannot even use OS-packaged
    # pip for this, as it's too old; we need to manually download the
    # last 3.5 get-pip.py.
    - name: Download old version of get-pip.py
      get_url:
        url: "{{ django_stack_venv_get_pip_url }}"
        dest: "{{ django_stack_gcorn_home }}/get-pip.py"
        checksum: "{{ django_stack_venv_get_pip_hash }}"
    - name: Create virtualenv and install pip
      shell: |
        virtualenv -p {{ django_stack_venv_python }} --no-pip {{django_stack_venv_dir }}
        . {{ django_stack_venv_dir }}/bin/activate
        {{ django_stack_venv_python }} {{ django_stack_gcorn_home }}/get-pip.py {{ django_stack_pip_spec }}

    - name: Ensure base packages are installed in virtualenv
      pip:
        name: "{{ django_stack_venv_base_pkgs }}"
        virtualenv: "{{ django_stack_venv_dir }}"
        virtualenv_python: "{{ django_stack_venv_python }}"
        virtualenv_site_packages: "{{ django_stack_venv_sitepackage }}"
        extra_args: "-U"
      no_log: "{{ django_stack_venv_no_log }}"

    - name: Optional commands to run prior to req install
      command: "{{ item }}"
      with_items: "{{ django_stack_venv_cmds }}"

    - name: Setup virtualenv from requirements file
      pip:
        requirements: "/venv-export/git/{{ django_stack_requirements_path }}"
        virtualenv: "{{ django_stack_venv_dir }}"
        virtualenv_python: "{{ django_stack_venv_python }}"
        virtualenv_site_packages: "{{ django_stack_venv_sitepackage }}"
      no_log: "{{ django_stack_venv_no_log }}"
      when: django_stack_github_requirements_path is not defined

    - name: Setup virtualenv from requriements file with requisite hashes
      pip:
        requirements: "/venv-export/git/{{ django_stack_requirements_path }}"
        virtualenv: "{{ django_stack_venv_dir }}"
        virtualenv_python: "{{ django_stack_venv_python }}"
        virtualenv_site_packages: "{{ django_stack_venv_sitepackage }}"
        extra_args: --require-hashes
      no_log: "{{ django_stack_venv_no_log }}"
      when: django_stack_github_requirements_path is defined

    - name: Setup virtualenv additional github requirements
      pip:
        requirements: "/venv-export/git/{{ django_stack_github_requirements_path }}"
        virtualenv: "{{ django_stack_venv_dir }}"
        virtualenv_python: "{{ django_stack_venv_python }}"
        virtualenv_site_packages: "{{ django_stack_venv_sitepackage }}"
      no_log: "{{ django_stack_venv_no_log }}"
      when: django_stack_github_requirements_path is defined

    # Hack around a probable bug in pip 20.1b1 that leaves INSTALLER and
    # RECORD files unreadable by any other user than root, which will prevent
    # rsyncing them as an unprivileged user from outside the container
    - name: Ensure contents of virtualenv are world-readable
      file:
        path: "{{ django_stack_venv_dir }}"
        recurse: yes
        mode: g=rX,o=rX

    - name: Move remote virtualenv into docker exportable filespace
      command: mv {{django_stack_venv_dir}} /venv-export/{{django_stack_app_name}}

  delegate_to: django_stack_venv
  become: no

- name: Copy over locally built virtualenv to remote server
  synchronize:
    src: "{{ tmp_dir }}/{{ django_stack_app_name }}/"
    dest: "{{ django_stack_venv_dir }}/"
    recursive: yes
    perms: yes
    delete: yes
  become_user: "{{ django_stack_gcorn_user }}"
  become: yes
