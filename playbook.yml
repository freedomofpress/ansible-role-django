---

- name: Gather facts from all hosts
  hosts: all
  gather_facts: yes
  become: yes
  tasks:
    - set_fact:
        database_ip: "{{ hostvars.database.ansible_eth1.ipv4.address }}"
        django_ip: "{{ hostvars.djangoserver.ansible_eth1.ipv4.address }}"

    - lineinfile:
        dest: /etc/hosts
        line: "{{ item.value }}   {{ item.key }}"
      with_dict:
        database: "{{ database_ip }}"
        djangoserver: "{{ django_ip }}"
  tags: always

- name: Establish certs
  hosts: all
  become: yes
  pre_tasks:
    - name: Slap in hostnames needed for openssl logic
      hostname:
        name: "{{ inventory_hostname }}"
  roles:
    - role: freedomofpress.openssl_node
      tags: ssl-node


- name: Setup Elasticsearch
  hosts: database
  become: yes
  roles:
    - role: elastic.elasticsearch
      tags: ['elastic']

    - role: jdauphant.nginx
      tags: ['elastic', 'nginx']
      es_config:
        cluster.name: "node1"
        network.host: [_local_]
        bootstrap.mlockall: true
        index.cache.field.type: soft
        index.cache.field.max_size: 50000
        index.cache.field.expire: 10m
        discovery.zen.ping.multicast.enabled: false
  vars:
    es_plugins:
        - plugin: mobz/elasticsearch-head
    es_instance_name: "node1"
    es_scripts: false
    es_version_lock: true
    es_major_version: "2.x"
    es_version: "2.4.0"
    es_plugins_reinstall: true
    es_heap_size: "{{((ansible_memtotal_mb / 2) | int) if ansible_memtotal_mb < 65536 else 31744 }}m"
    nginx_sites:
      encrypted:
        - listen {{ database_ip }}:9200 ssl
        - client_max_body_size 200M
        - location / { proxy_pass http://127.0.0.1:9200/; }
        - ssl_certificate /etc/ssl/certs/{{ansible_fqdn}}.pem
        - ssl_certificate_key /etc/ssl/private/{{ansible_fqdn}}-key.pem

- name: Setup postgres
  hosts: database
  become: yes
  pre_tasks:
    - name: Ensure ssl-cert user exists
      group:
        name: ssl-cert

    - name: Allow postgres user access
      file:
        path: /etc/ssl/private/{{ansible_fqdn}}-key.pem
        mode: 0640
        group: ssl-cert
  roles:
    - role: ANXS.postgresql
      tags: ['postgres']
  vars:
    postgresql_users:
      - name: django_user
        pass: django_password
    postgresql_databases:
      - name: fpf
        owner: django_user
    postgresql_user_privileges:
      - name: django_user
        db: fpf
        priv: "ALL"
        role_attr_flags: "CREATEDB"
    postgresql_ssl: on
    postgresql_ssl_cert_file: /etc/ssl/certs/{{ansible_fqdn}}.pem
    postgresql_ssl_key_file: /etc/ssl/private/{{ansible_fqdn}}-key.pem
    postgresql_listen_addresses: ["{{ database_ip }}"]
    postgresql_pg_hba_custom:
      - type: hostssl
        database: all
        user: all
        address: 'samenet'
        method: md5

- name: Run django environment
  hosts: djangoserver
  become: yes
  pre_tasks:
    - name: Create user
      user:
        name: "{{ django_stack_gcorn_user }}"
        home: "{{ django_stack_gcorn_home }}"
        createhome: yes
      tags: ['node']

  roles:
    - role: jdauphant.nginx
      tags: ['nginx']

    - role: geerlingguy.nodejs
      tags: ['node']

    - role: django_stack
      tags: ['django']
  vars:
    django_stack_superuser_admin: admin
    django_stack_superuser_email: mike@freedom.press
    django_db_user: django_user
    django_db_host: database
    django_db_password: django_password
    django_stack_app_name: freedompress
    django_secret_key: f1822d2fe58daeadc88e0e4eef2f155fc3edd3713ff9a5d1e27696afd9231d905db51c98dc
    django_stack_es_host_url: https://database:9200
    nginx_sites:
      default:
        - listen 80
        - return 301 https://localhost:4443$request_uri
      encrypted:
        - listen 443 ssl
        - location / { proxy_pass http://127.0.0.1:8000/; }
        - location /static { alias /var/www/django-static; }
        - location /media { alias /var/www/django-media; }
        - ssl_certificate /etc/ssl/certs/{{ansible_fqdn}}.pem
        - ssl_certificate_key /etc/ssl/private/{{ansible_fqdn}}-key.pem
    nodejs_version: "6.x"
    nodejs_install_npm_user: "{{ django_stack_gcorn_user }}"
    django_stack_git_deploy:
      - key: "{{ lookup('file','deploy_key') }}"
    django_stack_git_repo:
      - url: "{{ lookup('ENV','DJANGO_GIT_REPO') }}"
        key: "/home/gcorn/.ssh/github_deploy"
    django_stack_manage_post:
      - createdevdata
      - update_index
    django_stack_npm_commands:
      - run build
    django_stack_gunicorn_opt_envs:
      DJANGO_ALLOWED_HOSTS: "'*'"
      MAILGUN_FAIL_SILENTLY: True
      DJANGO_JSON_LOG: True
    django_stack_force_refresh: true
